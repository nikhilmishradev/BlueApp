@file:OptIn(ExperimentalFoundationApi::class)package com.androidtechguru.blueapp.presentation.ui.screensimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.rememberLazyListStateimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.MoreVertimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.Iconimport androidx.compose.material3.Scaffoldimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.tooling.preview.Previewimport androidx.hilt.navigation.compose.hiltViewModelimport com.androidtechguru.blueapp.presentation.ui.components.BottomSheetDialogimport com.androidtechguru.blueapp.presentation.ui.components.ListScreenimport com.androidtechguru.blueapp.presentation.ui.theme.Dimensimport com.androidtechguru.blueapp.presentation.ui.theme.FABColorimport com.androidtechguru.blueapp.presentation.ui.viewmodel.MainViewModelimport com.androidtechguru.blueapp.presentation.ui.components.Carouselimport com.androidtechguru.blueapp.presentation.ui.components.SearchBar@Preview@Composablefun MainScreen(viewModel: MainViewModel = hiltViewModel()) {    val isBottomSheetVisible by viewModel.isBottomSheetVisible.collectAsState()    val carouselImages by viewModel.images.collectAsState()    val state = rememberLazyListState()        Scaffold(        floatingActionButton = {            FloatingActionButton(onClick = { viewModel.onFabClicked() },                containerColor = FABColor,                contentColor = Color.White,                shape = CircleShape) {                Icon(Icons.Default.MoreVert,                    tint = Color.White,                    contentDescription = null)            }        },        content = { paddingValues ->            LazyColumn(modifier = Modifier                .fillMaxSize()                .padding(paddingValues)                .padding(Dimens.paddingMedium_16dp),                state = state) {                item {                    Carousel(carouselImages) { currentPage ->                        viewModel.onPageChanged(currentPage)                    }                    Spacer(modifier = Modifier.height(Dimens.paddingSmall_8dp))                }                                stickyHeader {                    SearchBar(viewModel)                    Spacer(modifier = Modifier.height(Dimens.paddingMedium_16dp))                }                item {                    ListScreen(viewModel.filteredItems.collectAsState().value)                }            }        }    )        if (isBottomSheetVisible) {        BottomSheetDialog(viewModel)    }}